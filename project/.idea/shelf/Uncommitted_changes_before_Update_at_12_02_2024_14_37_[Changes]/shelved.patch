Index: ../../deeplearning/Assignment2.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0,\r\n \"metadata\": {\r\n  \"colab\": {\r\n   \"provenance\": [],\r\n   \"toc_visible\": true\r\n  },\r\n  \"kernelspec\": {\r\n   \"name\": \"python3\",\r\n   \"display_name\": \"Python 3\"\r\n  },\r\n  \"language_info\": {\r\n   \"name\": \"python\"\r\n  }\r\n },\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# Assignment 2: Spectrogram classification\\n\",\r\n    \"\\n\",\r\n    \"**Deadline**: 21/2/24\\n\",\r\n    \"\\n\",\r\n    \"**Submission: Submit a PDF export of the completed notebook as well as the .ipynb file.**\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"**General**:\\n\",\r\n    \"This assignment aims to practice designing and training neural networks. The task the networks solve is “predicting”/”inferring” a signal type from its spectrogram image.\\n\",\r\n    \"You will explore two neural network architectures. A starter code is provided to help with data processing and make it a bit easier.\\n\",\r\n    \"\\n\",\r\n    \"You may modify the starter code as you see fit, including changing the signatures of functions and adding/removing helper functions. However, please ensure you adequately explain what you are doing and why.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"5YWrTV1pbYMx\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import collections\\n\",\r\n    \"import scipy.io\\n\",\r\n    \"!pip install opencv-python\\n\",\r\n    \"# from google.colab.patches import cv2_imshow\\n\",\r\n    \"!pip install torch\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"DMZ5hSyRc-_H\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import cv2\\n\",\r\n    \"import torch\\n\",\r\n    \"import torch.nn as nn\\n\",\r\n    \"import torch.optim as optim\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Question 1. Data (15%)\\n\",\r\n    \"\\n\",\r\n    \"With any machine learning problem, the first thing that we would want to do\\n\",\r\n    \"is to get an intuitive understanding of what our data looks like. Download the file\\n\",\r\n    \"`Data set` from the course page on Moodle and upload it to Google Drive.\\n\",\r\n    \"Then, mount Google Drive from your Google Colab notebook:\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"r5lMTodVeaez\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"from google.colab import drive\\n\",\r\n    \"drive.mount('/content/gdrive')\\n\",\r\n    \"\\n\",\r\n    \"# Find the path to the file:\\n\",\r\n    \"path = '/content/gdrive/My Drive/assignment2' # TODO - UPDATE ME!\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"rqd_ExJEejS8\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (a) -- 3%\\n\",\r\n    \"\\n\",\r\n    \"Load the training and test data, and separate the training data into training and validation.\\n\",\r\n    \"Create the NumPy arrays `train_data`, `valid_data`, `test_data`.\\n\",\r\n    \"\\n\",\r\n    \"  \\n\",\r\n    \"\\n\",\r\n    \"1.    `data`, all of which should be of shape `[N, 128, 128, 1]`. The dimensions of this NumPy array are as follows:\\n\",\r\n    \"\\n\",\r\n    \"- `N` - the number of rows allocated to train, valid, or test\\n\",\r\n    \"- `128` - the height of each spectrogram (i.e., the number of freq. points)\\n\",\r\n    \"- `128` - the width of each spectrogram (i.e., the number of time samples)\\n\",\r\n    \"- `1` - the color channels\\n\",\r\n    \"\\n\",\r\n    \"2.   `labels`, all of which should be of shape `[N,]` The dimensions of this NumPy array are as follows:\\n\",\r\n    \"\\n\",\r\n    \"- `N` - the number of rows allocated to train, valid, or test\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"The pixel intensities are stored as an integer between 0 and 255.\\n\",\r\n    \"Make sure you normalize your images, namely, divide the intensities by 255 so that you have floating-point values between 0 and 1. Then, subtract 0.5\\n\",\r\n    \"so that the elements of `train_data`, `valid_data` and `test_data` are between -0.5 and 0.5.\\n\",\r\n    \"**Note that this step actually makes a huge difference in training!**\\n\",\r\n    \"\\n\",\r\n    \"This function might take a while to run, and it can take several minutes just to load the files from Google Drive. If you want to avoid running this code multiple times, you can save your NumPy arrays and load it later:\\n\",\r\n    \"https://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"zYWjfJV3DuCk\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"import glob\\n\",\r\n    \"from PIL import Image\\n\",\r\n    \"folder_path = '/content/gdrive/My Drive/assignment2'\\n\",\r\n    \"def sort_data(folder_path):\\n\",\r\n    \"  train_path = f'{folder_path}/train_data/*.jpg'\\n\",\r\n    \"  test_path = f'{folder_path}/test_data/*.jpg'\\n\",\r\n    \"  train_images = {}\\n\",\r\n    \"  test_images = {}\\n\",\r\n    \"  for file in glob.glob(train_path):\\n\",\r\n    \"      filename = file.split(\\\"/\\\")[-1] # get the name of the .png file\\n\",\r\n    \"      label = filename.split('_')[0] # get the label\\n\",\r\n    \"      image = cv2.imread(file, cv2.IMREAD_GRAYSCALE)\\n\",\r\n    \"      img = cv2.resize(image, dsize=(128, 128), interpolation=cv2.INTER_CUBIC)\\n\",\r\n    \"      img = (img/255) - 0.5\\n\",\r\n    \"      train_images[filename] = img\\n\",\r\n    \"\\n\",\r\n    \"  for file in glob.glob(test_path):\\n\",\r\n    \"      filename = file.split(\\\"/\\\")[-1] # get the name of the .png file\\n\",\r\n    \"      label = filename.split('_')[0] # get the label\\n\",\r\n    \"      image = cv2.imread(file, cv2.IMREAD_GRAYSCALE)\\n\",\r\n    \"      img = cv2.resize(image, dsize=(128, 128), interpolation=cv2.INTER_CUBIC)\\n\",\r\n    \"      img = (img/255) - 0.5\\n\",\r\n    \"      test_images[filename] = img\\n\",\r\n    \"\\n\",\r\n    \"  sort_train_dict = dict(sorted(train_images.items()))\\n\",\r\n    \"  sort_test_dict = dict(sorted(test_images.items()))\\n\",\r\n    \"  train = np.array(list(sort_train_dict.values()))\\n\",\r\n    \"  test = np.array(list(sort_test_dict.values()))\\n\",\r\n    \"  train_label = np.array(list(sort_train_dict.keys()))\\n\",\r\n    \"  test_labels = np.array(list(sort_test_dict.keys()))\\n\",\r\n    \"  reindex = np.random.permutation(len(train))\\n\",\r\n    \"  train = train[reindex]\\n\",\r\n    \"  train_label = train_label[reindex]\\n\",\r\n    \"  tr_label, ts_label = [], []\\n\",\r\n    \"  for ii in range(len(train_label)):\\n\",\r\n    \"    tr_label.append(train_label[ii].split('_')[0])\\n\",\r\n    \"  for ii in range(len(test_labels)):\\n\",\r\n    \"    ts_label.append(test_labels[ii].split('_')[0])\\n\",\r\n    \"  train_label = np.array(tr_label)\\n\",\r\n    \"  test_labels = np.array(ts_label)\\n\",\r\n    \"  train_data, valid_data = train[int(train.shape[0] * 0.15):], train[:int(train.shape[0] * 0.15)]\\n\",\r\n    \"  train_labels, valid_labels = train_label[int(train_label.shape[0] * 0.15):], train_label[:int(train_label.shape[0] * 0.15)]\\n\",\r\n    \"  return train_data, train_labels, valid_data, valid_labels, test, test_labels\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"8I0QBSI3Lh62\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (b) -- 3%\\n\",\r\n    \"\\n\",\r\n    \"We want to train a model that determines the signal type from a spectrogram. Therefore, our model will take in a spectrogram image.\\n\",\r\n    \"\\n\",\r\n    \"Write a function generate_plots() that takes one of the data sets that you produced in part (a), and generates image plots of the different spectrograms with different classes. Your function generate_plots() plots 12 subplots of spectrogram images containing all classes.\\n\",\r\n    \"\\n\",\r\n    \"Note: While at this stage we are working with NumPy arrays, later on, we will need to convert this NumPy array into a PyTorch tensor with shape [N, 128, 128].\\n\",\r\n    \"\\n\",\r\n    \"Include the result with your PDF submission.\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"Qyxs7WDI3zHO\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Your code goes here\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"# Run this code, include the result with your PDF submission!!\\n\",\r\n    \"print(train_data.shape) # if this is [N, 128, 128]\\n\",\r\n    \"print(generate_plots(train_data).shape) # should be [N, 128, 128]\\n\",\r\n    \"plt.imshow(generate_plots(train_data[idx*30])) # should show spectrogram, 30 is just an example.\\n\",\r\n    \"# Please take the first 2 digits of your ID (if both of your ID starts with 0 change it to 1)\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"zLU0GBJ-d_gM\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (c) -- 3%\\n\",\r\n    \"\\n\",\r\n    \"Why is it important that our data set will be ***balanced***? In other words, suppose we created\\n\",\r\n    \"a data set where 99% of the images are of Gaussian spectrogram, and\\n\",\r\n    \"1% of the images are the other classes. Why could this be a problem?\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"nRxtj6FV6q1M\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**Write your explanation here:**\\n\",\r\n    \"\\n\",\r\n    \"\\\\\\n\",\r\n    \"\\n\",\r\n    \"\\\\\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"Lc9HtH77fGz1\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (d) -- 3%\\n\",\r\n    \"\\n\",\r\n    \"Our neural network will take as input spectrogram images and predict their class. Since we have four string classes we would want to convert them into numbers, where each number is assigned to each class.\\n\",\r\n    \"\\n\",\r\n    \"**Complete** the helper function `convert_class_to_number` so that the function output will be a dictionary that assigns a number to each class.\\n\",\r\n    \"Examples of how this function should operate are detailed in the code below.\\n\",\r\n    \"\\n\",\r\n    \"You can use the defined `vocab`, `lables2num_vocab`,\\n\",\r\n    \"and `num2labels_vocab` in your code.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"vCELKSFLJ4ZG\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# A list of all the labels in the data set. We will assign a unique\\n\",\r\n    \"# identifier for each of these labels.\\n\",\r\n    \"vocab = sorted(list(set([s for s in train_labels]))) # A mapping of index => label (string)\\n\",\r\n    \"num2labels_vocab = dict(enumerate(vocab)) # A mapping of labels => its index\\n\",\r\n    \"labels2num_vocab = {word:index for index, word in num2labels_vocab.items()}\\n\",\r\n    \"\\n\",\r\n    \"def convert_class_to_number(labels):\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    This function takes a list of labels\\n\",\r\n    \"    and returns a new list with the same structure, but where each label\\n\",\r\n    \"    is replaced by its index in `num2labels_vocab`.\\n\",\r\n    \"\\n\",\r\n    \"    Example:\\n\",\r\n    \"    >>> convert_class_to_number([['Pulse', 'SingleFrequency', 'Pulse', 'Gaussian', 'ThreeFrequency'], ['ThreeFrequency', 'Pulse', 'Gaussian', 'SingleFrequency'])\\n\",\r\n    \"    [[1, 2, 1, 0, 3], [3, 1, 0, 2]]\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"\\n\",\r\n    \"    # Write your code here\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"y8kw-sQcfls6\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (e) -- 3%\\n\",\r\n    \"Since the labels in the data are comprised of $4$ distinct classes, our task boils down to classification where the label space $\\\\mathcal{S}$ is of cardinality $|\\\\mathcal{S}|=4$ while our input, which is comprised of spectrograms data, is treated as a vector of size $16384\\\\times 1$.\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"**Implement** yourself a function `create_onehot`, which takes the data in index notation and outputs it in a one-hot notation.\\n\",\r\n    \"\\n\",\r\n    \"Start by reviewing the helper function, which is given to you:\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"58n8HZwNJu-B\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def create_onehot(data):\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    Convert one batch of data in the index notation into its corresponding onehot\\n\",\r\n    \"    notation. Remember, the function should work for st.\\n\",\r\n    \"\\n\",\r\n    \"    input - vector with shape D (1D or 2D)\\n\",\r\n    \"    output - vector with shape (D,4)\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"\\n\",\r\n    \"    # Write your code here\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"_U-bGPZZfwzn\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Question 2. Model architecture (30%)\\n\",\r\n    \"\\n\",\r\n    \"In this part we will look at two model architectures: a MultiLayer Perceptron (MLP) and a Convolutional Neural Network (CNN).\\n\",\r\n    \"\\n\",\r\n    \"Since the labels are comprised of $4$ distinct classes, our task boils down to classification where the label space $\\\\mathcal{S}$ is of cardinality $|\\\\mathcal{S}|=4$ while our input is treated as a vector of size $128 \\\\times 128$ (i.e., the spectrogram matrix).\\n\",\r\n    \"\\n\",\r\n    \"We build the model in PyTorch. Since PyTorch uses automatic\\n\",\r\n    \"differentiation, we only need to write the *forward pass* of our\\n\",\r\n    \"model.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"dXPQhpiNHBeP\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"###Part (a) -- Multy layer perceptron (MLP) (15%)\\n\",\r\n    \"\\n\",\r\n    \"Please provide a detailed diagram that best describes this model’s architecture. Specify the number of layers, weights,  etc.\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"This link will help you to understand how to upload an image to the google Colab\\n\",\r\n    \"[https://medium.com/analytics-vidhya/embedding-your-image-in-google-colab-markdown-3998d5ac2684](https://)\\n\",\r\n    \"\\n\",\r\n    \"This is an example of how to change the width and height of the image scheme:\\n\",\r\n    \"\\n\",\r\n    \"`<img src=\\\"image path\\\" width=\\\"400px height=\\\"200px\\\"\\\" />`\\n\",\r\n    \"\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"x2nPVcr_G6pV\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"class PyTorchMLP(nn.Module):\\n\",\r\n    \"    def __init__(self, num_hidden=100):\\n\",\r\n    \"        super(PyTorchMLP, self).__init__()\\n\",\r\n    \"        self.layer1 = nn.Linear(128*128, num_hidden)\\n\",\r\n    \"        self.layer2 = nn.Linear(num_hidden, 4)\\n\",\r\n    \"        self.num_hidden = num_hidden\\n\",\r\n    \"    def forward(self, inp):\\n\",\r\n    \"        inp = inp.reshape([-1, 128*128])\\n\",\r\n    \"        # Note that we will be using the nn.CrossEntropyLoss(), which computes the softmax operation internally, as loss criterion\\n\",\r\n    \"        hidden = self.layer1(inp)\\n\",\r\n    \"        output = self.layer2(hidden)\\n\",\r\n    \"        output = torch.nn.functional.log_softmax(output, dim=1)\\n\",\r\n    \"        return output\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"N4pV2TIpG3yz\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**Please show the model scheme here:**\\n\",\r\n    \"\\n\",\r\n    \"\\\\\\n\",\r\n    \"\\n\",\r\n    \"\\\\\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"6qLmfV_y7e1I\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"###Part (b) -- Convolutional Neural Network (CNN) (15%)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"The CNN model is given below. Please provide a detailed diagram that best describes this model's architecture. Specify the number of  layers, kernel size, weights, etc.\\n\",\r\n    \"\\n\",\r\n    \"This link will help you to understand how to upload an image to the google colab\\n\",\r\n    \"[https://medium.com/analytics-vidhya/embedding-your-image-in-google-colab-markdown-3998d5ac2684](https://)\\n\",\r\n    \"\\n\",\r\n    \"This is an example of how to change the width and height of the image scheme:\\n\",\r\n    \"\\n\",\r\n    \"`<img src=\\\"image path\\\" width=\\\"400px height=\\\"200px\\\"\\\" />`\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"sUmMFYjp7dt_\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"class CNNChannel(nn.Module):\\n\",\r\n    \"    def __init__(self, n=8):\\n\",\r\n    \"        super(CNNChannel, self).__init__()\\n\",\r\n    \"        self.n = n\\n\",\r\n    \"        self.conv1 = nn.Conv2d(in_channels=1, out_channels=n, kernel_size=3, stride=1, padding=2)\\n\",\r\n    \"        self.conv2 = nn.Conv2d(in_channels=n, out_channels=2*n, kernel_size=3, stride=1, padding=2)\\n\",\r\n    \"        self.conv3 = nn.Conv2d(in_channels=2*n, out_channels=4*n, kernel_size=3, stride=1, padding=2)\\n\",\r\n    \"        self.conv4 = nn.Conv2d(in_channels=4*n, out_channels=8*n, kernel_size=3, stride=1, padding=2)\\n\",\r\n    \"        self.fc1 = nn.Linear(5184, 100)\\n\",\r\n    \"        self.fc2 = nn.Linear(100, 4)\\n\",\r\n    \"\\n\",\r\n    \"    def forward(self, xs, verbose=False):\\n\",\r\n    \"      x = np.expand_dims(xs, axis=1)\\n\",\r\n    \"      x = torch.Tensor(x)\\n\",\r\n    \"      x = self.conv1(x)\\n\",\r\n    \"      x - nn.functional.relu(x)\\n\",\r\n    \"      x = nn.functional.max_pool2d(x, kernel_size=2, stride=2)\\n\",\r\n    \"      x = self.conv2(x)\\n\",\r\n    \"      x = nn.functional.relu(x)\\n\",\r\n    \"      x = nn.functional.max_pool2d(x, kernel_size=2, stride=2)\\n\",\r\n    \"      x = self.conv3(x)\\n\",\r\n    \"      x = nn.functional.relu(x)\\n\",\r\n    \"      x = nn.functional.max_pool2d(x, kernel_size=2, stride=2)\\n\",\r\n    \"      x = self.conv4(x)\\n\",\r\n    \"      x = nn.functional.relu(x)\\n\",\r\n    \"      x = nn.functional.max_pool2d(x, kernel_size=2, stride=2)\\n\",\r\n    \"      x = x.view(x.size(0), -1)\\n\",\r\n    \"      x = self.fc1(x)\\n\",\r\n    \"      x = nn.functional.relu(x)\\n\",\r\n    \"      x = self.fc2(x)\\n\",\r\n    \"      return x\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"HBlWiibj_guF\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**Please show the model's scheme here:**\\n\",\r\n    \"\\n\",\r\n    \"\\\\\\n\",\r\n    \"\\n\",\r\n    \"\\\\\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"Rwh8CuCGBhwf\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"The function `estimate_accuracy` is written for you. Depending on how you set up your model and training, you may need to modify this function.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"fD9Y8xbZ9m1p\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def estimate_accuracy(model, data, label, batch_size=100, max_N=100000):\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    Estimate the accuracy of the model on the data. To reduce\\n\",\r\n    \"    computation time, use at most `max_N` elements of `data` to\\n\",\r\n    \"    produce the estimate.\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    model.eval()\\n\",\r\n    \"    correct = 0\\n\",\r\n    \"    N = 0\\n\",\r\n    \"    for i in range(0, data.shape[0], batch_size):\\n\",\r\n    \"    # get a batch of data\\n\",\r\n    \"      xt, st = get_batch(data, label, i, i + batch_size, onehot=False)\\n\",\r\n    \"    # forward pass prediction\\n\",\r\n    \"      y = model(torch.Tensor(xt))\\n\",\r\n    \"      y = y.detach().numpy() # convert the PyTorch tensor => numpy array\\n\",\r\n    \"      pred = np.argmax(y, axis=1)\\n\",\r\n    \"      true = np.argmax(st, axis=1)\\n\",\r\n    \"      for ii in range(len(y)):\\n\",\r\n    \"        if pred[ii] == true[ii]:\\n\",\r\n    \"          correct += 1\\n\",\r\n    \"      N += st.shape[0]\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"      if N > max_N:\\n\",\r\n    \"        break\\n\",\r\n    \"    return correct / N\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"SQscOUGRDbo6\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"The following function `get_batch` will take as input the whole dataset and output a single batch for the training. The output size of the batch is explained below.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"HHMFAFsIDX0K\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def get_batch(data, label, range_min, range_max, onehot):\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    Convert one batch of data into input and output\\n\",\r\n    \"    data and return the training data (xt, st) where:\\n\",\r\n    \"     - `xt` is an numpy array of one-hot vectors of shape [batch_size, 128, 128]\\n\",\r\n    \"     - `st` is either\\n\",\r\n    \"            - a numpy array of shape [batch_size, 4] if onehot is True,\\n\",\r\n    \"            - a numpy array of shape [batch_size] containing indicies otherwise\\n\",\r\n    \"\\n\",\r\n    \"    Preconditions:\\n\",\r\n    \"     - `data` is a numpy array of shape [N, 128, 128] produced by a call\\n\",\r\n    \"        to `process_data`\\n\",\r\n    \"     - range_max > range_min\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    xt = data[range_min:range_max]\\n\",\r\n    \"    st = label[range_min:range_max]\\n\",\r\n    \"    st = convert_class_to_number(st)\\n\",\r\n    \"    if onehot:\\n\",\r\n    \"        st = create_onehot(st).reshape(-1, 4)\\n\",\r\n    \"    return xt, st\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"_0QEWTk9DZ3U\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Question 3. Training (34%)\\n\",\r\n    \"\\n\",\r\n    \"Now, we will write the functions required to train the PyTorch models using the Adam optimizer and the cross entropy loss.\\n\",\r\n    \"\\n\",\r\n    \"Our task is a multi-class classification problem. Therefore, we will use a one-hot vector to represent our target.\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"1zrxKK2aE_Nz\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (a) -- 15%\\n\",\r\n    \"\\n\",\r\n    \"**Complete** the function `train_model`, and use it to train your PyTorch MLP and CNN models.\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"Plot the learning curve using the `plot_learning_curve` function provided\\n\",\r\n    \"to you, and include your plot in your PDF submission.\\n\",\r\n    \"\\n\",\r\n    \"It is also recommended to checkpoint your model (save a copy) after every epoch.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"yCJh26TXdnXq\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"def train_model(model,\\n\",\r\n    \"                train_data=train_data,\\n\",\r\n    \"                train_label=train_labels,\\n\",\r\n    \"                validation_data=valid_data,\\n\",\r\n    \"                validation_label=valid_labels,\\n\",\r\n    \"                batch_size=100,\\n\",\r\n    \"                learning_rate=0.001,\\n\",\r\n    \"                weight_decay=0,\\n\",\r\n    \"                max_iters=1000,\\n\",\r\n    \"                checkpoint_path=None):\\n\",\r\n    \"\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    Train the PyTorch model on the dataset `train_data`, reporting\\n\",\r\n    \"    the validation accuracy on `validation_data`, for `max_iters`\\n\",\r\n    \"    iteration.\\n\",\r\n    \"\\n\",\r\n    \"    If you want to **checkpoint** your model weights (i.e. save the\\n\",\r\n    \"    model weights to Google Drive), then the parameter\\n\",\r\n    \"    `checkpoint_path` should be a string path with `{}` to be replaced\\n\",\r\n    \"    by the iteration count:\\n\",\r\n    \"\\n\",\r\n    \"    For example, calling\\n\",\r\n    \"\\n\",\r\n    \"    >>> train_model(model, ...,\\n\",\r\n    \"            checkpoint_path = '/content/gdrive/My Drive/assignment2/mlp/ckpt-{}.pk')\\n\",\r\n    \"\\n\",\r\n    \"    will save the model parameters in Google Drive every 100 iterations.\\n\",\r\n    \"    You will have to make sure that the path exists (i.e. you'll need to create\\n\",\r\n    \"    the folder Intro_to_Deep_Learning, mlp or cnn, etc...). Your Google Drive will be populated with files:\\n\",\r\n    \"\\n\",\r\n    \"    - /content/gdrive/My Drive/assignment2/mlp/ckpt-500.pk\\n\",\r\n    \"    - /content/gdrive/My Drive/assignment2/cnn/ckpt-1000.pk\\n\",\r\n    \"    - ...\\n\",\r\n    \"\\n\",\r\n    \"    To load the weights at a later time, you can run:\\n\",\r\n    \"\\n\",\r\n    \"    >>> model.load_state_dict(torch.load('/content/gdrive/My Drive/assignment2/mlp/ckpt-500.pk'))\\n\",\r\n    \"\\n\",\r\n    \"    This function returns the training loss, and the training/validation accuracy,\\n\",\r\n    \"    which we can use to plot the learning curve.\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    criterion = nn.CrossEntropyLoss()\\n\",\r\n    \"    optimizer = optim.Adam(model.parameters(),\\n\",\r\n    \"                           lr=learning_rate,\\n\",\r\n    \"                           weight_decay=weight_decay)\\n\",\r\n    \"\\n\",\r\n    \"    iters, losses = [], []\\n\",\r\n    \"    iters_sub, train_accs, val_accs  = [], [] ,[]\\n\",\r\n    \"\\n\",\r\n    \"    n = 0 # the number of iterations\\n\",\r\n    \"    while True:\\n\",\r\n    \"      reindex = np.random.permutation(len(train_data))\\n\",\r\n    \"      train_data = train_data[reindex]\\n\",\r\n    \"      train_labels = train_label[reindex]\\n\",\r\n    \"      for i in range(0, train_data.shape[0], batch_size):\\n\",\r\n    \"          if (i + batch_size) > train_data.shape[0]:\\n\",\r\n    \"              break\\n\",\r\n    \"          model.train()\\n\",\r\n    \"          # get the input and targets of a minibatch\\n\",\r\n    \"          xt, st = get_batch(train_data, train_label, i, i + batch_size, onehot=False)\\n\",\r\n    \"          # convert from numpy arrays to PyTorch tensors\\n\",\r\n    \"          xt = torch.Tensor(xt)\\n\",\r\n    \"          st = torch.Tensor(st)\\n\",\r\n    \"\\n\",\r\n    \"          zs = ...                 # compute prediction logit\\n\",\r\n    \"          loss =                   # compute the total loss\\n\",\r\n    \"          ...                      # compute updates for each parameter\\n\",\r\n    \"          ...                      # make the updates for each parameter\\n\",\r\n    \"          ...                      # a clean up step for PyTorch\\n\",\r\n    \"\\n\",\r\n    \"          # save the current training information\\n\",\r\n    \"          iters.append(n)\\n\",\r\n    \"          losses.append(float(loss)/batch_size)  # compute *average* loss\\n\",\r\n    \"          if n % 100 == 0:\\n\",\r\n    \"              iters_sub.append(n)\\n\",\r\n    \"              train_cost = float(loss.detach().numpy())\\n\",\r\n    \"              train_acc = estimate_accuracy(model, train_data, train_label)\\n\",\r\n    \"              train_accs.append(train_acc)\\n\",\r\n    \"              val_acc = estimate_accuracy(model, validation_data, validation_label)\\n\",\r\n    \"              val_accs.append(val_acc)\\n\",\r\n    \"              print(\\\"Iter %d. [Val Acc %.0f%%] [Train Acc %.0f%%, Loss %f]\\\" % (\\n\",\r\n    \"                    n, val_acc * 100, train_acc * 100, train_cost))\\n\",\r\n    \"\\n\",\r\n    \"              if (checkpoint_path is not None) and n > 0:\\n\",\r\n    \"                  torch.save(model.state_dict(), checkpoint_path.format(n))\\n\",\r\n    \"\\n\",\r\n    \"          # increment the iteration number\\n\",\r\n    \"          n += 1\\n\",\r\n    \"\\n\",\r\n    \"          if n > max_iters:\\n\",\r\n    \"              return iters, losses, iters_sub, train_accs, val_accs\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"def plot_learning_curve(iters, losses, iters_sub, train_accs, val_accs):\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    Plot the learning curve.\\n\",\r\n    \"    \\\"\\\"\\\"\\n\",\r\n    \"    plt.title(\\\"Learning Curve: Loss per Iteration\\\")\\n\",\r\n    \"    plt.plot(iters, losses, label=\\\"Train\\\")\\n\",\r\n    \"    plt.xlabel(\\\"Iterations\\\")\\n\",\r\n    \"    plt.ylabel(\\\"Loss\\\")\\n\",\r\n    \"    plt.show()\\n\",\r\n    \"\\n\",\r\n    \"    plt.title(\\\"Learning Curve: Accuracy per Iteration\\\")\\n\",\r\n    \"    plt.plot(iters_sub, train_accs, label=\\\"Train\\\")\\n\",\r\n    \"    plt.plot(iters_sub, val_accs, label=\\\"Validation\\\")\\n\",\r\n    \"    plt.xlabel(\\\"Iterations\\\")\\n\",\r\n    \"    plt.ylabel(\\\"Accuracy\\\")\\n\",\r\n    \"    plt.legend(loc='best')\\n\",\r\n    \"    plt.show()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"U3joOVaXINXm\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (b) -- 15%\\n\",\r\n    \"\\n\",\r\n    \"Train your models from Questions 2(a) and 2(b). Change the values of a few\\n\",\r\n    \"hyperparameters, including the learning rate, batch size, choice of $n$ and the kernel size in the CNN model, choice of $num$_$hidden$ in the MLP model. You do not need to check all values for all hyperparameters. Instead, try to make significant changes to see how each change affects your scores\\n\",\r\n    \"(try to start with finding a reasonable learning rate for each network, then start changing the other parameters).\\n\",\r\n    \"\\n\",\r\n    \"In this section, explain how you tuned your hyperparameters.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"kzH235f8NYBh\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**Write your explanation here:**\\n\",\r\n    \"\\n\",\r\n    \"\\\\\\n\",\r\n    \"\\n\",\r\n    \"\\\\\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"Af1OS3uvOXGg\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**Include the training curves for the two models:**\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"DS8qvV2OOeR4\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"pytorch_mlp = PyTorchMLP()\\n\",\r\n    \"# learning_curve_info = train_model(pytorch_mlp, ...)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"# plot_learning_curve(*learning_curve_info)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"CK-FEbXKRCXT\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"model_cnn_ch = CNNChannel()\\n\",\r\n    \"# learning_curve_info = train_model(pytorch_mlp, ...)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"# plot_learning_curve(*learning_curve_info)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"z61kXyKBt82A\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (c) -- 4%\\n\",\r\n    \"\\n\",\r\n    \"Include your training curves for the **best** models from each MLP and CNN.\\n\",\r\n    \"These are the models that you will use in Question 4.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"jaLtjfAcW7L0\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"pytorch_mlp = PyTorchMLP()\\n\",\r\n    \"print('The model we used here is MLP channel model')\\n\",\r\n    \"learning_curve_info = run_pytorch_gradient_descent(pytorch_mlp,\\n\",\r\n    \"                                 train_data=train_data,\\n\",\r\n    \"                                 train_label=train_ts_onehot,\\n\",\r\n    \"                                 validation_data=valid_data,\\n\",\r\n    \"                                 validation_label=valid_ts_onehot,\\n\",\r\n    \"                                 batch_size=100,\\n\",\r\n    \"                                 learning_rate=0.001,\\n\",\r\n    \"                                 weight_decay=0,\\n\",\r\n    \"                                 max_iters=1000,\\n\",\r\n    \"                                 checkpoint_path=None)\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"plot_learning_curve(*learning_curve_info)\\n\",\r\n    \"learning_curve_info = train_model(model_cnn_ch, train_data, valid_data, batch_size=64, learning_rate=0.001, weight_decay=0, max_iters=120, checkpoint_path=None)\\n\",\r\n    \"plot_learning_curve(*learning_curve_info)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"rI5hBOK6XWBI\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Include the training curves for the two models.\\n\",\r\n    \"model_cnn_ch = CNNChannel()\\n\",\r\n    \"print('The model we used here is CNN model')\\n\",\r\n    \"learning_curve_info = train_model(model_cnn_ch, train_data, train_ts_onehot, valid_data, valid_ts_onehot,\\n\",\r\n    \"                                  batch_size=25, learning_rate=0.001, weight_decay=0, max_iters=50, checkpoint_path=None)\\n\",\r\n    \"plot_learning_curve(*learning_curve_info)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"JAZJm0EtXPg6\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"## Question 4. Testing (21%)\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"XXcLo8bTiaKD\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (a) -- 7%\\n\",\r\n    \"\\n\",\r\n    \"Report the test accuracies of your **single best** model,\\n\",\r\n    \"separately for the test set.\\n\",\r\n    \"Do this by choosing the model\\n\",\r\n    \"architecture that produces the best validation accuracy. For instance,\\n\",\r\n    \"if your model attained the\\n\",\r\n    \"best validation accuracy in epoch 10, then the weights at epoch 10 is what you should be using\\n\",\r\n    \"to report the test accuracy.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"0hDl58XJX68j\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Make sure to include the test accuracy in your report!!\\n\",\r\n    \"# Write your code here:\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"9o63BEYbYdnn\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (b) -- 7%\\n\",\r\n    \"\\n\",\r\n    \"For each model, display one of the signal spectrograms that your model correctly classified, and one of the signal spectrograms that your model classified incorrectly.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"t2AFE0zwYcey\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"# Make sure to include the test accuracy in your report!!\\n\",\r\n    \"# Write your code here:\\n\",\r\n    \"\\n\",\r\n    \"\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"LTyoQO9yY-sI\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"### Part (c) -- 7%\\n\",\r\n    \"\\n\",\r\n    \"Compare the capacity, the number of layers, and performance of the two architectures, and discuss the advantages and disadvantages between these architectures.\\n\",\r\n    \"\\n\",\r\n    \"Will one of these models perform better? Explain why.\\n\",\r\n    \"\\n\",\r\n    \"Is the architecture choices important in machine learning?\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"CEOT7sb78_cE\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"**Write your explanation here:**\\n\",\r\n    \"\\n\",\r\n    \"\\\\\\n\",\r\n    \"\\n\",\r\n    \"\\\\\\n\",\r\n    \"\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"wLgttUY79Cqz\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"source\": [\r\n    \"# PDF export\\n\",\r\n    \"To export a PDF of the completed notebook, you might find the following helper functions helpful. Here are some resources for additional learning.\\n\",\r\n    \"\\n\",\r\n    \"- https://nbconvert.readthedocs.io/en/latest/\\n\",\r\n    \"\\n\",\r\n    \"- https://nbconvert.readthedocs.io/en/latest/install.html#installing-tex\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"_F1TojWCiuPt\"\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"!sudo apt-get install texlive-xetex texlive-fonts-recommended texlive-plain-generic\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"aYwMZxvEjTR1\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"source\": [\r\n    \"!jupyter nbconvert --to pdf /content/drive/MyDrive/Colab_Notebooks/Assignment2/Assignment2.ipynb\\n\",\r\n    \"# TODO - UPDATE ME WITH THE TRUE PATH! and UPDATE THE FILE NAME.\"\r\n   ],\r\n   \"metadata\": {\r\n    \"id\": \"Rp68ryzEjXDR\"\r\n   },\r\n   \"execution_count\": null,\r\n   \"outputs\": []\r\n  }\r\n ]\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../deeplearning/Assignment2.ipynb b/../../deeplearning/Assignment2.ipynb
--- a/../../deeplearning/Assignment2.ipynb	(revision 357b44176999e849047cf0a2048e14953de80b6f)
+++ b/../../deeplearning/Assignment2.ipynb	(date 1707740918491)
@@ -88,6 +88,7 @@
     "drive.mount('/content/gdrive')\n",
     "\n",
     "# Find the path to the file:\n",
+    "\n",
     "path = '/content/gdrive/My Drive/assignment2' # TODO - UPDATE ME!"
    ],
    "metadata": {
